# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is generally recommended to include the directories below, but you may want to
#  exclude them if you are using PyCharm for development.
.idea/

# VS Code
.vscode/

# Kuzu database files
*.kuzu
kuzu_db/
*.db

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Log files
*.log

# Configuration files with sensitive data
config.local.yaml
config.local.yml
.env.local
.env.production
.env.staging

# Memory system specific - KuzuMemory database locations
.kuzu_memory/              # Primary database location (standardized)
kuzu-memories/             # Legacy database location (to be consolidated)
.test_kuzu_memory/         # Test database (ephemeral)
.kuzu-memory-backups/      # Database backups (keep for safety)
memory_data/               # Legacy memory data
memory_cache/              # Memory cache files
*.memory                   # Memory export files

# Benchmark results
benchmark_results/
performance_data/

# Pre-commit
.pre-commit-config.yaml.bak

# Added by Claude MPM /mpm-init
$RECYCLE.BIN/
*.backup
*.bak
*.cab
*.cache
*.cert
*.crt
*.key
*.lnk
*.mpm.tmp
*.msi
*.msm
*.msp
*.old
*.pem
*.pytest_cache
*.sql
*.sqlite
*.sqlite3
*.sublime-project
*.sublime-workspace
.claude-mpm/*.log
.claude-mpm/cache/
.claude-mpm/configuration.yaml
.claude-mpm/logs/
.claude-mpm/memories/
.claude-mpm/sessions/
.claude-mpm/tmp/
.claude-mpm/mcp_auto_config_preference.json
.claude/agents/
.claude/cache/
.claude/sessions/
.conda/
.env.*
.kuzu-memory/
.mcp-vector-search/
.npm
.project
.pydevproject
.secrets/
.settings/
.yarn/
Desktop.ini
_build/
backup/
backups/
conda-env/
credentials/
kuzu-memories/
logs/
node_modules/
npm-debug.log*
pip-wheel-metadata/
site/
temp/
tmp/
virtualenv/
yarn-debug.log*
yarn-error.log*

# Claude Code configuration (project-specific, regenerated on install)
.claude/config.local.json
.claude/agents/.dependency_cache
.claude/agents/.mpm_deployment_state

# Kuzu Memory backups (temporary)
.kuzu-memory-backups/

# Auggie rules (project-specific, regenerated on install)
.augment/rules/

# Changelog fragments (preserve)
!changelog.d/*.md
!changelog.d/*.rst

# MCP Ticketer
.mcp-ticketer/
